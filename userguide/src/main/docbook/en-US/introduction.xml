<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "jBPM_Reference_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="introduction">
    <title>
        Introduction
    </title>
  
    <para>
            This <emphasis>Guide</emphasis> has been written for
            developers and administrators. Read on in order to learn how
            to use jBPM and JPDL in your corporate setting. Note that
            this book not only teaches how to use the software but
            explains, in significant detail, how it works.
    </para>
 
    <note>
        <para>
            This <emphasis>Guide</emphasis> contains a lot of terminology.
            Definitions for the key terms can be found in <xref
            linkend="helpfuldefinitions"/>.
        </para>
    </note>    
  
    <para>
        The JBoss <firstterm>Business Process Manager</firstterm> (jBPM) is
        a flexible and extensible scaffolding for process languages. The
        <firstterm>jBPM Process Definition Language</firstterm> (JPDL) is
        one of the <firstterm>process languages</firstterm> that is built on
        top of this framework. It is an intuitive language, designed to
        enable the user to express business processes graphically. It does
        so by representing <firstterm>tasks</firstterm>, <firstterm>wait
        states</firstterm> (for asynchronous communication),
        <firstterm>timers</firstterm> and automated
        <firstterm>actions</firstterm>. To bind these operations together,
        the language has a powerful and extensible <firstterm>control flow
        mechanism</firstterm>.
    </para>

    <para>
       The JPDL has few dependencies, making it is as easy to install as a
       Java library. To do so, deploy it on a <firstterm>J2EE clustered
       application server</firstterm>. One will find it particularly useful
       in environments in which extreme throughput is a crucial requirement. 
    </para>

<note>
    <para>
        The JPDL can be configured for use with any database. It can also be
        deployed on any application server.
    </para>
 </note> 
 
    <section>
        <title>
            Overview
        </title>
        
        <para>
            Read this section to gain an overview of the way in which the jBPM
            works.
        </para>
        
        <para>
            The core workflow and business process management functionality
            is packaged in the form of a simple Java library. This library
            includes a service that manages and executes jPDL database
            processes.
        </para>
        
        <figure id="overview.image">
          <title>Overview of the jPDL components</title>
          <mediaobject><imageobject><imagedata fileref="images/overview.png"/></imageobject></mediaobject>
        </figure>
    </section>

    <section>
        <title>
            The jPDL Suite
        </title>
        
        <para>        
            This suite contains all of the jBPM components
            and the following sub-directories:
        </para>
   
       <itemizedlist>
       <listitem><para>config </para></listitem>
       <listitem><para>database </para></listitem>
       <listitem><para>deploy </para></listitem>
       <listitem><para>designer </para></listitem>
       <listitem><para>examples </para></listitem>
       <listitem><para>lib </para></listitem>
       <listitem><para>src </para></listitem>       
       </itemizedlist>
    
      
      
    
        <para>
            The <application>JBoss Application Server</application> consists
            of the following components:
        </para>

        <variablelist>
            <varlistentry>
                <term>The jBPM Web Console</term>
                <listitem>
                    <para>
                    This is packaged
                    as a web archive. Both <firstterm>process participants</firstterm>
                    and jBPM administrators can use this console.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>The Job Executor</term>
                <listitem>
                    <para>
                    This is part of the <application>Console Web
                    Application</application>. It is launched by a
                    <firstterm>servlet</firstterm>, then spawns a
                    <firstterm>thread pool</firstterm>, whose job it is to
                    monitor and executes timers and asynchronous messages.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>The jBPM Tables</term>
                <listitem>
                    <para>
                    These are contained in the default
                    <application>Hypersonic</application> database. (It
                    already contains a process.)
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>An Example Process</term>
                <listitem>
                    <para>
                    One example process is already deployed to the jBPM
                    database.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>Identity Component</term>
                <listitem>
                    <para>
                    The identity component libraries are part of the
                    <application>Console Web Application</application>. It
                    owns those tables found in the database which have the
                    <code>JBPM_ID_</code> prefix.
                    </para>
                </listitem>
            </varlistentry>

        </variablelist>
    
  </section>
  
  <section id="jpdlgraphicalprocessdesigner">
    <title>
        The jPDL Graphical Process Designer
    </title>

    <para>
        The jPDL also includes the <application>Graphical Process Designer
       Tool</application>. Use it to design business processes. (It is an
       <application>Eclipse</application> plug-in and is included with the
       <application>JBoss Developer Studio</application> product.)
    </para>

    <para>
        It facilitates a smooth transition from business process
        modeling to practical implementation, making it of use to both the
        business analyst and the technical developer.       
    </para>
  </section>

  <section>
    <title>
        The jBPM Console Web Application
    </title>
    
    <para>
        The <application>Console Web Application</application> serves
        three purposes. Firstly, it functions as a central user interface,
        allowing one to interact with those run-time tasks that have been
        generated by the process executions. Secondly, it is an
        administrative and monitoring console that allows one to inspect and
        manipulate run-time instances. The third role of this software is
        that of business activity monitor. In this role, it presents
        statistics about the execution of processes. This information is of
        use to managers seeking to optimize performance as it allows them to
        find and eliminate bottlenecks.
    </para>

  </section>
  
  <section>
    <title>
        The jBPM Core Library
    </title>
    
    <para>
       The Business Process Manager has two core components. These are the
       "plain Java" (J2SE) library, which manages process definitions, and
       the run-time environment, which executes process instances.
    </para>

    <para>
       The jBPM, itself, is a Java library. Consequently, it can be used in
       any Java environment, be it a web or 
       <application>Swing</application> application, an
       <systemitem>Enterprise Java Bean</systemitem> or a web service.
    </para>   
       
    <para>   
       One can also package and expose the jBPM library as a
       <firstterm>stateless session</firstterm> <systemitem>Enterprise Java
       Bean</systemitem>. Do this if there is a need to create a clustered
       deployment or provide scalability for extremely high throughput. (The
       stateless session <systemitem>Enterprise Java Bean</systemitem>
       adheres to the <literal>J2EE 1.3</literal> specifications, mearning
       that it can be deployed on any application server.)
    </para>


    <para>
        Be aware that some parts of the <filename>jbpm-jpdl.jar</filename>
        file are dependent upon third-party libraries such as
        <application>Hibernate</application> and
        <application>Dom4J</application>.
    </para>

    <para>
       <application>Hibernate</application> provides the jBPM with
       <firstterm>persistence</firstterm> functionality. Also, apart from
       providing traditional <firstterm>O/R mapping</firstterm>,
       <application>Hibernate</application> resolves the differences between
       the Structured Query Language dialects used by competing databases.
       This ability makes the jBPM highly portable.
    </para>
        
    <para>
        The Business Process Manager's application programming interface can
        be accessed from any custom Java code in your project, whether it be
        a web application, an Enterprise Java Bean, a web service component
        or a message-driven bean.
    </para>
    
  </section>

  <section>
    <title>
        The Identity Component
    </title>
    
    <para>
        The jBPM can integrate with any company directory that contains user
        (and other organizational) data. (For those projects for which no
        organizational information component is available, use the
        <firstterm>Identity Component</firstterm>. This component has a
        "richer" model than those used by traditional servlets, Enterprise
        Java Beans and portlets.)
    </para>
    
    <note>
        <para>
            Read <xref linkend="theidentitycomponent" /> to learn more about
            this topic.
        </para>
    </note>
    

 </section>


<section>
    <title>
        The JBoss jBPM Job Executor
    </title>

    <para>
        The <firstterm>JBoss jBPM Job Executor</firstterm> is a component
        designed for the purpose of monitoring and executing jobs in a
        standard Java environment. <firstterm>Jobs</firstterm> are used for
        timers and asynchronous messages. (In an enterprise environment, the
        Java Message Service and the Enterprise Java Bean
        <classname>TimerService</classname> might be used for this purpose;
        the Job Executor is best used in a "standard" environment.)
    </para>
    
    <para>
        The Job Executor component is packaged in the core
        <classname>jbpm-jpdl</classname> library. It can only be deployed in
        one of the following two scenarios:
    </para>

    <itemizedlist>    
        <listitem><para>if the <classname>JbpmThreadsServlet</classname> has
        been configured to start the Job Executor.</para></listitem>
        
        <listitem><para>if a  separate Java Virtual Machine has been started so that the Job
        Executor thread can be run from within it</para></listitem>
    </itemizedlist>



  </section>
   <section>
 <title>
    Conclusion
    </title>    
    <para>
        Having read this chapter, you have gained a broad overview of the
        jBPM and its constituent components.
    </para>
    
  </section>

  

</chapter>
